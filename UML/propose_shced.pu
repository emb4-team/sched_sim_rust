@startuml proposed_sched
title Proposed Scheduler

    interface DAGSchedulerBase<T: ProcessorBase + Clone> {
        + {abstract} new(dag: Graph, processor: ProcessorBase) : DAGSchedulerBase
        + {abstract} set_dag(dag: Graph)
        + {abstract} set_processor(processor: ProcessorBase)
        + {abstract} set_ready_queue(ready_queue: VecDeque)
        + {abstract} get_dag() : Graph
        + {abstract} get_processor() : ProcessorBase
        + {abstract} get_ready_queue() : VecDeque
        + {abstract} set_node_logs(node_logs: Vec)
        + {abstract} set_processor_log(processor_log: ProcessorLog)
        + {abstract} get_node_logs() : Vec
        + {abstract} get_processor_log() : ProcessorLog
        + {abstract} schedule() : (i32, VecDeque)
        + {abstract} sort_ready_queue(ready_queue: VecDeque)
    }

    note left of DAGSchedulerBase::schedule
    "default implementation"
    end note

    class SchedulerCreater<T: ProcessorBase + Clone> {
        - scheduler_type: SchedulerType,
            - dag: &Graph<NodeData, i32>,
            - processor: &T,
        + {static} create_scheduler<T>() : Box<dyn DAGSchedulerBase<T>>
    }

    enum SchedulerType {
        A,
        B,
    }

    struct Sched_A<T: ProcessorBase + Clone> {
        - dag : Graph
        - processor : ProcessorBase
        - ready_queue : VecDeque
        - log : DAGSchedulerLog
        + {static} new(dag: Graph, processor: ProcessorBase) : Sched_A
        + {static} set_dag(dag: Graph)
        + {static} set_processor(processor: ProcessorBase)
        + {static} set_ready_queue(ready_queue: VecDeque)
        + {static} get_dag() : Graph
        + {static} get_processor() : ProcessorBase
        + {static} get_ready_queue() : VecDeque
        + {static} set_node_logs(node_logs: Vec)
        + {static} set_processor_log(processor_log: ProcessorLog)
        + {static} get_node_logs() : Vec
        + {static} get_processor_log() : ProcessorLog
        + **{static} sort_ready_queue(ready_queue: VecDeque)**
    }

    note right of Sched_A::sort_ready_queue
    "Individually implemented"
    end note

    struct Sched_B<T: ProcessorBase + Clone> {
        - dag : Graph
        - processor : ProcessorBase
        - ready_queue : VecDeque
        - log : DAGSchedulerLog
        + {static} new(dag: Graph, processor: ProcessorBase) : Sched_A
        + {static} set_dag(dag: Graph)
        + {static} set_processor(processor: ProcessorBase)
        + {static} set_ready_queue(ready_queue: VecDeque)
        + {static} get_dag() : Graph
        + {static} get_processor() : ProcessorBase
        + {static} get_ready_queue() : VecDeque
        + {static} set_node_logs(node_logs: Vec)
        + {static} set_processor_log(processor_log: ProcessorLog)
        + {static} get_node_logs() : Vec
        + {static} get_processor_log() : ProcessorLog
        + **{static} sort_ready_queue(ready_queue: VecDeque)**
    }

    note left of Sched_B::sort_ready_queue
    "Individually implemented"
    end note

    struct DAGSchedulerLog {
        - node_logs: Vec<NodeLog>,
        - processor_log: ProcessorLog,

        + {static} new(dag: Graph, num_cores: usize) : DAGSchedulerLog;
    }

    
    struct NodeLog {
        - core_id: usize,
        - dag_id: usize,
        - node_id: usize,
        - start_time: i32,
        - finish_time: i32,

        + {static} new(dag_id: usize, node_id: usize) : NodeLog
    }

    struct ProcessorLog {
        - average_utilization: f32,
        - variance_utilization: f32,
        - core_logs: Vec<CoreLog>,

        + {static} new(num_cores: usize) : ProcessorLog;
        + {static} calculate_average_utilization();
        + {static} calculate_variance_utilization();
        + {static} calculate_cores_utilization(schedule_length: i32);
    }

    struct CoreLog {
        - core_id: usize,
        - total_proc_time: i32,
        - utilization: f32,

        + {static} new(core_id: usize) : CoreLog;
        + {static} calculate_utilization(schedule_length: i32);
    }  

    DAGSchedulerBase <|-down- Sched_A
    DAGSchedulerBase <|-down- Sched_B
    Sched_A o-down- DAGSchedulerLog
    Sched_B o-down- DAGSchedulerLog

    DAGSchedulerLog o-down- NodeLog
    DAGSchedulerLog o-down- ProcessorLog
    ProcessorLog o-down- CoreLog

    SchedulerCreater -right- SchedulerType
    SchedulerCreater .down.> Sched_A
    SchedulerCreater .down.> Sched_B

    DAGSchedulerBase -right[hidden]- SchedulerCreater

@enduml